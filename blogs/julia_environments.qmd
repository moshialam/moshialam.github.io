---
title: "Reproducible julia projects"
author: "Moshi Alam"
date: "2024-08-24"
categories: [julia, Programming, Reproducibility]
---
A workflow that starts your project to be reproducible from day one, will reduce your work going forward. Since I have started using this workflow, I have realized that by construction it forces certain good habits. In this post, I will share a simple example of creating a reproducible project in julia, by using [julia environments](https://pkgdocs.julialang.org/v1/environments/). The setup below will ensure that the correct versions of your dependencies are used automatically on any given machine.

## Setting Up a julia Project Environment

First, setting up a new julia project will typically involve creating a directory, **initializing the environment**, and adding any necessary packages.

```julia
# Create a new directory for your project
mkdir MyCoolProject
cd("MyCoolProject")

# Open julia and initialize a new project
julia> ]
(v1.9) pkg> activate .
(MyCoolProject) pkg> generate MyCoolProject
```

These commands will create a Project.toml and Manifest.toml file in your project directory. These files will track your project dependencies and their exact versions, ensuring reproducibility.

<!-- ### Adding Packages to Your Project -->

Once you’ve initialized your project, you can add packages to it, as you normally would.

```julia
# Add a package to your project
(MyCoolProject) pkg> add DataFrames
```

This command does two things:

1.	Updates Project.toml: It adds DataFrames to the list of dependencies.
2.	Updates Manifest.toml: It records the exact version of DataFrames and its dependencies to ensure reproducibility.

## Reusing, modifying and sharing your environment

If you’ve closed your julia session and want to continue working on your project later, navigate back to your project directory and reactivate the environment:

```julia 
cd("path/to/MyCoolProject")
julia> ]
(v1.9) pkg> activate .
```

This reactivates the environment associated with the Project.toml and Manifest.toml files in that directory.


To add more packages to your project at any time:
```julia
(MyCoolProject) pkg> add Plots
```
This command updates your environment to include the Plots package. The Project.toml and Manifest.toml files will be updated accordingly.

To see the current status of your environment:
```julia
(MyCoolProject) pkg> update
```

To share your project with others, provide the directory containing Project.toml and Manifest.toml. Others can recreate your environment by running:
```julia
julia> ]
(v1.9) pkg> activate .
(MyCoolProject) pkg> instantiate
```

The instantiate command installs all the dependencies listed in Manifest.toml, recreating your exact environment.
