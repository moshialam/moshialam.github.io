---
title: "Reproducible julia projects"
author: "Moshi Alam"
date: "2024-08-24"
categories: [julia, Programming, Reproducibility]
---
A workflow that starts your project to be reproducible from day one, will reduce your work going forward. Since I have started using this workflow, I have realized that by construction it forces certain good habits. In this post, I will share a simple example of creating a reproducible project in julia, by using [julia environments](https://pkgdocs.julialang.org/v1/environments/). The setup below will ensure that the correct versions of your dependencies are used automatically on any given machine.

## Setting Up a julia Project Environment

First, setting up a new julia project will typically involve creating a directory, **initializing the environment**, and adding any necessary packages.
```zsh
mkdir -p path/to/MyCoolProject
cd path/to/MyCoolProject
```
Then I typically create a `setup.jl` file in the `path/to/MyCoolProject/code` folder to activate the environment and adding neccesary packages.

```julia
using Pkg
cd(@__DIR__)
Pkg.activate(@__DIR__)
```

These commands will create a `Project.toml` and `Manifest.toml` file in your project directory. These files will track your project dependencies and their exact versions, ensuring reproducibility.

<!-- ### Adding Packages to Your Project -->

Once you’ve initialized your project, you can add packages to it, as you normally would.

```julia
# Add packages to your project
(MyCoolProject) pkg> add DataFrames
```

Adding the very first package does two things:

1.	Updates Project.toml: It adds DataFrames to the list of dependencies.
2.	Updates Manifest.toml: It records the exact version of DataFrames and its dependencies to ensure reproducibility.

## Reusing and modifying your environment

If you’ve closed your julia session and want to continue working on your project later, navigate back to your project directory and reactivate the environment:

```julia 
cd("path/to/MyCoolProject")
julia> ]
(v1.9) pkg> activate .
```

This reactivates the environment associated with the Project.toml and Manifest.toml files in the same directory.

To add more packages to your project at any time:
```julia
(MyCoolProject) pkg> add Plots
```
This command updates your environment to include the Plots package. The Project.toml and Manifest.toml files will be updated accordingly.

To see the current status of your environment:
```julia
(MyCoolProject) pkg> update
```
## Sharing your environment

To share your project with others, provide the directory containing Project.toml and Manifest.toml. Others can recreate your environment by running:
```julia
julia> ]
(v1.9) pkg> activate .
(MyCoolProject) pkg> instantiate
```

The instantiate command installs all the dependencies listed in Manifest.toml, recreating your exact environment.


Setting Up the Project on a Different Machine:
•	When you clone a project repository or copy a project folder to a different machine, the Manifest.toml file contains the exact versions of all dependencies needed.
•	Running Pkg.instantiate in this context installs these exact versions, recreating the original environment.

```julia
julia> ]
(v1.9) pkg> instantiate
```
2.	Restoring an Environment:
	•	If you’ve made changes to your environment or accidentally removed packages and want to restore the environment to the exact state described in the Manifest.toml, you can use Pkg.instantiate to reinstall all necessary dependencies.
	•	This is also useful if you’ve deleted the ~/.julia/environments directory or are switching between environments and want to ensure the current project has all the required packages.
3.	Ensuring Consistency: If you’re working in a shared project and the Manifest.toml has been updated by someone else (e.g., new packages have been added or versions changed), running Pkg.instantiate will synchronize your local environment with the latest dependencies as defined in the Manifest.toml.


In a separate post I will cover my basic setup to version control my scriptss using git and hosting them on GitHub. 
